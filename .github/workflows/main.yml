name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Step 1: Backend Build and Test
  backend:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Files
        run: ls -al

      - name: Build backend Docker image for testing
        working-directory: Backend
        run: |
          docker build -t backend-test-image:latest -f Dockerfile.test .

      - name: Run backend tests inside Docker container
        run: |
          docker run --rm backend-test-image:latest pytest

  # Step 2: Frontend Build and Test
  frontend:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Files
        run: ls -al

      - name: Build frontend Docker image for testing
        run: |
          docker build -t frontend-test-image:latest -f Dockerfile.test .

      - name: Run frontend tests inside Docker container
        run: |
          docker run --rm frontend-test-image:latest npm test -- --watch=false --no-progress

  # Step 3: Simulate Deployment
  simulate-deploy:
    name: Simulate Deployment
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build backend Docker image for deployment
        working-directory: Backend
        run: |
          docker build -t backend-deploy-image:latest .

      - name: Build frontend Docker image for deployment
        run: |
          docker build -t frontend-deploy-image:latest .

      - name: Simulate running containers
        run: |
          # Start backend container
          docker run -d --name backend -p 8000:8000 backend-deploy-image:latest

          # Start frontend container
          docker run -d --name frontend -p 8080:80 frontend-deploy-image:latest

          # Check running containers
          docker ps

          # Stop and remove containers after simulation
          docker stop backend frontend
          docker rm backend frontend
